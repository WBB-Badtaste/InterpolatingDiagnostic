/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name  : NYCe4000
 *  Component Name: HOSTSW
 *  Subsystem Name: SAC
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_par_var_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/*!
 *  @file
 *  @brief  Definition file for the parameter conversion functions for the subsystems SAC.
 *
 *  For the SAC_PAR_ID type, the following support functions exist:
 *  - SAC_PAR_ID_NR_OF_IDS                    Number of SAC parameters.
 *  - SacParIdNrOfIds()                       Retrieve the number of SAC parameters.
 *  - SacParIdByIndex(index, *SAC_PAR_ID)     Retrieve the n-th SAC parameter.
 *  - SacParIdToString(SAC_PAR_ID)            Retrieve the name of SAC parameter.
 *  - SacParIdToUserString(SAC_PAR_ID)        Retrieve a human readable string for SAC parameter.
 *  - SacParIdFromString(string, *SAC_PAR_ID) Retrieve the SAC parameter representing the string.
 *  - SacParIdGetDescription(SAC_PAR_ID)      Retrieve the description of SAC parameter.
 *  - SacParIdGetUnit(SAC_PAR_ID)             Retrieve the unit of SAC parameter.
 *  - SacParIdIsValid(SAC_PAR_ID)             Checks if the given value of SAC parameter is valid.
 *  - SacParIdGetCategory(SAC_PAR_ID)         Retrieve the category of SAC parameter.
 *  - SacParIdGetDataType(SAC_PAR_ID)         Retrieve the data type of SAC parameter.
 */

#ifndef __SAC_PAR_CONVERSION_H__
#define __SAC_PAR_CONVERSION_H__

#include "sacfclparameters.h"
#include "sacparameters.h"

#ifndef SAC_EXPORT
    #ifdef WIN32
        #define SAC_EXPORT __declspec(dllimport)
    #else
        #define SAC_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  @addtogroup sac_conversion
 *  @{
 */

/**
 *  Every parameter belongs to a category.
 *  These categories are used in the NYCe tools to show sets of parameters.
 */
typedef enum sac_par_category
{
    SAC_PAR_CATEGORY_UNSPECIFIED,
    SAC_PAR_CATEGORY_FCL,
    SAC_PAR_CATEGORY_DEF,
    SAC_PAR_CATEGORY_STEPPER,
    SAC_PAR_CATEGORY_PID,
    SAC_PAR_CATEGORY_FILTER,
    SAC_PAR_CATEGORY_ENHANCED,
    SAC_PAR_CATEGORY_STATES,
    SAC_PAR_CATEGORY_ALIGN,
    SAC_PAR_CATEGORY_ERR,
    SAC_PAR_CATEGORY_PTP,
    SAC_PAR_CATEGORY_HOME,
    SAC_PAR_CATEGORY_STOP,
    SAC_PAR_CATEGORY_CC,
    SAC_PAR_CATEGORY_PWM,
    SAC_PAR_CATEGORY_CFG_AXIS,
    SAC_PAR_CATEGORY_CFG_IO,
    SAC_PAR_CATEGORY_ENCODER,
    SAC_PAR_CATEGORY_ERR_HANDLER,
    SAC_PAR_CATEGORY_UDC_PARS
} SAC_PAR_CATEGORY;

// SAC parameter conversion functions

/**
 *  @brief      Number of SAC_PAR_IDs.
 */
#define SAC_PAR_NR_OF_IDS 457

/**
 *  @brief      Retrieve the number of SAC_PAR_IDs.
 *
 *  @return     Number of SAC_PAR_IDs.
 */
SAC_EXPORT uint32_t SacParIdNrOfIds(void);

/**
 *  @brief      Retrieve the n-th SAC_PAR_ID.
 *
 *  @param[in]  index   The index within SAC_PAR_NR_OF_IDS to retrieve.
 *  @param[out] pValue  The value of the n-th sac parameter.
 *
 *  @retval     NYCE_OK                         parameter successfully retrieved.
 *  @retval     SAC_ERR_INVALID_PARAMETER       pValue is NULL.
 *  @retval     SAC_ERR_PARAMETER_OUT_OF_RANGE  index is out of range.
 */
SAC_EXPORT NYCE_STATUS SacParIdByIndex(uint32_t index, SAC_PAR_ID* pValue);

/**
 *  @brief      Convert type SAC_PAR_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
SAC_EXPORT const char* SacParIdToString(SAC_PAR_ID value);

/**
 *  @brief      Convert type SAC_PAR_ID to a human readable string.
 *
 *  @param[in]  value   The parameter to convert.
 *
 *  @return     The human readable string representation of value.
 */
SAC_EXPORT const char* SacParIdToUserString(SAC_PAR_ID value);

/**
 *  @brief      Convert the given string to an SAC_PAR_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The parameter id of string.
 *
 *  @retval     NYCE_OK                   string is successfully converted to a valid SAC_PAR_ID.
 *  @retval     SAC_ERR_INVALID_PARAMETER string or pValue is NULL.
 *  @retval     SAC_ERR_INVALID_STRING    string could not be converted to SAC_PAR_ID.
 */
SAC_EXPORT NYCE_STATUS SacParIdFromString(const char* string, SAC_PAR_ID* pValue);

/**
 *  @brief      Retrieve the description of SAC_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The description of the parameter.
 */
SAC_EXPORT const char* SacParIdGetDescription(SAC_PAR_ID value);

/**
 *  @brief      Retrieve the unit type of a SAC_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The unit of the parameter.
 */
SAC_EXPORT const char* SacParIdGetUnit(SAC_PAR_ID value);

/**
 *  @brief      Check if value is a valid SAC_PAR_ID.
 *
 *  @param[in]  value   The parameter to check.
 *
 *  @retval     TRUE    value is a valid sac parameter.
 *  @retval     FALSE   value is an invalid sac parameter.
 */
SAC_EXPORT BOOL SacParIdIsValid(SAC_PAR_ID value);

/**
 *  @brief      Retrieve the category of SAC_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The category of the parameter.
 */
SAC_EXPORT SAC_PAR_CATEGORY SacParIdGetCategory(SAC_PAR_ID value);

/**
 *  @brief      Retrieve the data type of SAC_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The data type of the parameter.
 */
SAC_EXPORT NYCE_DATA_TYPE SacParIdGetDataType(SAC_PAR_ID value);

/**
 *  @}
 */

#ifdef __cplusplus
}
#endif

#endif
