/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name:   NYCe4000
 *  Component Name: support
 *  Subsystem Name: deh
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_enum_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/**
 *  @file
 *  @brief  Enum conversion functions for sac.
 *  
 *  For every enum in the sac subsystem the following type to string conversion functions exist:
 *  - "<TYPE>ToString(TYPE)"            Convert the given value of "<TYPE>" to its exact string representation.
 *  - "<TYPE>ToUserString(TYPE)"        Convert the given value of "<TYPE>" to a human readable string.
 *  - "<TYPE>ToDescription(TYPE)"       Convert the given value of "<TYPE>" to a descriptive string.
 *  - "<TYPE>FromString(string, TYPE)"  Convert the given string to value of "<TYPE>".
 *  - "<TYPE>IsValid(TYPE)"             Checks if the given value of "<TYPE>" is valid.
 */

#ifndef __SACENUMS_H__
#define __SACENUMS_H__

#include "sacapi.h"

#ifndef DEH_EXPORT
    #ifdef WIN32
        #define DEH_EXPORT __declspec(dllimport)
    #else
        #define DEH_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif
/**
 *  @addtogroup sac_conversion
 *  @{
 */

//  SAC_DIRECTION Conversion routines

/**
 *  @brief      Convert type SAC_DIRECTION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDirectionToString(SAC_DIRECTION value);

/**
 *  @brief      Convert type SAC_DIRECTION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDirectionToUserString(SAC_DIRECTION value);

/**
 *  @brief      Convert type SAC_DIRECTION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacDirectionToDescription(SAC_DIRECTION value);

/**
 *  @brief      Convert the given string to an SAC_DIRECTION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_DIRECTION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_DIRECTION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacDirectionFromString(const char* string, SAC_DIRECTION* pValue);

/**
 *  @brief      Check if value is a valid SAC_DIRECTION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_DIRECTION.
 *  @retval     FALSE   value is not a valid SAC_DIRECTION.
 */
DEH_EXPORT BOOL SacDirectionIsValid(SAC_DIRECTION value);


//  SAC_HOME_MODE Conversion routines

/**
 *  @brief      Convert type SAC_HOME_MODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacHomeModeToString(SAC_HOME_MODE value);

/**
 *  @brief      Convert type SAC_HOME_MODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacHomeModeToUserString(SAC_HOME_MODE value);

/**
 *  @brief      Convert type SAC_HOME_MODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacHomeModeToDescription(SAC_HOME_MODE value);

/**
 *  @brief      Convert the given string to an SAC_HOME_MODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_HOME_MODE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_HOME_MODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacHomeModeFromString(const char* string, SAC_HOME_MODE* pValue);

/**
 *  @brief      Check if value is a valid SAC_HOME_MODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_HOME_MODE.
 *  @retval     FALSE   value is not a valid SAC_HOME_MODE.
 */
DEH_EXPORT BOOL SacHomeModeIsValid(SAC_HOME_MODE value);


//  SAC_INVERSION Conversion routines

/**
 *  @brief      Convert type SAC_INVERSION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacInversionToString(SAC_INVERSION value);

/**
 *  @brief      Convert type SAC_INVERSION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacInversionToUserString(SAC_INVERSION value);

/**
 *  @brief      Convert type SAC_INVERSION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacInversionToDescription(SAC_INVERSION value);

/**
 *  @brief      Convert the given string to an SAC_INVERSION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_INVERSION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_INVERSION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacInversionFromString(const char* string, SAC_INVERSION* pValue);

/**
 *  @brief      Check if value is a valid SAC_INVERSION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_INVERSION.
 *  @retval     FALSE   value is not a valid SAC_INVERSION.
 */
DEH_EXPORT BOOL SacInversionIsValid(SAC_INVERSION value);


//  SAC_EOS_CRITERION Conversion routines

/**
 *  @brief      Convert type SAC_EOS_CRITERION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEosCriterionToString(SAC_EOS_CRITERION value);

/**
 *  @brief      Convert type SAC_EOS_CRITERION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEosCriterionToUserString(SAC_EOS_CRITERION value);

/**
 *  @brief      Convert type SAC_EOS_CRITERION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacEosCriterionToDescription(SAC_EOS_CRITERION value);

/**
 *  @brief      Convert the given string to an SAC_EOS_CRITERION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_EOS_CRITERION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_EOS_CRITERION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacEosCriterionFromString(const char* string, SAC_EOS_CRITERION* pValue);

/**
 *  @brief      Check if value is a valid SAC_EOS_CRITERION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_EOS_CRITERION.
 *  @retval     FALSE   value is not a valid SAC_EOS_CRITERION.
 */
DEH_EXPORT BOOL SacEosCriterionIsValid(SAC_EOS_CRITERION value);


//  SAC_CONTROLLER_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_CONTROLLER_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacControllerTypeToString(SAC_CONTROLLER_TYPE value);

/**
 *  @brief      Convert type SAC_CONTROLLER_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacControllerTypeToUserString(SAC_CONTROLLER_TYPE value);

/**
 *  @brief      Convert type SAC_CONTROLLER_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacControllerTypeToDescription(SAC_CONTROLLER_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_CONTROLLER_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_CONTROLLER_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_CONTROLLER_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacControllerTypeFromString(const char* string, SAC_CONTROLLER_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_CONTROLLER_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_CONTROLLER_TYPE.
 *  @retval     FALSE   value is not a valid SAC_CONTROLLER_TYPE.
 */
DEH_EXPORT BOOL SacControllerTypeIsValid(SAC_CONTROLLER_TYPE value);


//  SAC_VELOCITY_ESTIMATION_METHOD Conversion routines

/**
 *  @brief      Convert type SAC_VELOCITY_ESTIMATION_METHOD to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacVelocityEstimationMethodToString(SAC_VELOCITY_ESTIMATION_METHOD value);

/**
 *  @brief      Convert type SAC_VELOCITY_ESTIMATION_METHOD to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacVelocityEstimationMethodToUserString(SAC_VELOCITY_ESTIMATION_METHOD value);

/**
 *  @brief      Convert type SAC_VELOCITY_ESTIMATION_METHOD to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacVelocityEstimationMethodToDescription(SAC_VELOCITY_ESTIMATION_METHOD value);

/**
 *  @brief      Convert the given string to an SAC_VELOCITY_ESTIMATION_METHOD.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_VELOCITY_ESTIMATION_METHOD.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_VELOCITY_ESTIMATION_METHOD.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacVelocityEstimationMethodFromString(const char* string, SAC_VELOCITY_ESTIMATION_METHOD* pValue);

/**
 *  @brief      Check if value is a valid SAC_VELOCITY_ESTIMATION_METHOD.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_VELOCITY_ESTIMATION_METHOD.
 *  @retval     FALSE   value is not a valid SAC_VELOCITY_ESTIMATION_METHOD.
 */
DEH_EXPORT BOOL SacVelocityEstimationMethodIsValid(SAC_VELOCITY_ESTIMATION_METHOD value);


//  SAC_INTEGRATOR_SWITCH_OFF_MODE Conversion routines

/**
 *  @brief      Convert type SAC_INTEGRATOR_SWITCH_OFF_MODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacIntegratorSwitchOffModeToString(SAC_INTEGRATOR_SWITCH_OFF_MODE value);

/**
 *  @brief      Convert type SAC_INTEGRATOR_SWITCH_OFF_MODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacIntegratorSwitchOffModeToUserString(SAC_INTEGRATOR_SWITCH_OFF_MODE value);

/**
 *  @brief      Convert type SAC_INTEGRATOR_SWITCH_OFF_MODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacIntegratorSwitchOffModeToDescription(SAC_INTEGRATOR_SWITCH_OFF_MODE value);

/**
 *  @brief      Convert the given string to an SAC_INTEGRATOR_SWITCH_OFF_MODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_INTEGRATOR_SWITCH_OFF_MODE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_INTEGRATOR_SWITCH_OFF_MODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacIntegratorSwitchOffModeFromString(const char* string, SAC_INTEGRATOR_SWITCH_OFF_MODE* pValue);

/**
 *  @brief      Check if value is a valid SAC_INTEGRATOR_SWITCH_OFF_MODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_INTEGRATOR_SWITCH_OFF_MODE.
 *  @retval     FALSE   value is not a valid SAC_INTEGRATOR_SWITCH_OFF_MODE.
 */
DEH_EXPORT BOOL SacIntegratorSwitchOffModeIsValid(SAC_INTEGRATOR_SWITCH_OFF_MODE value);


//  SAC_FF_ADDITION_POINT Conversion routines

/**
 *  @brief      Convert type SAC_FF_ADDITION_POINT to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacFfAdditionPointToString(SAC_FF_ADDITION_POINT value);

/**
 *  @brief      Convert type SAC_FF_ADDITION_POINT to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacFfAdditionPointToUserString(SAC_FF_ADDITION_POINT value);

/**
 *  @brief      Convert type SAC_FF_ADDITION_POINT to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacFfAdditionPointToDescription(SAC_FF_ADDITION_POINT value);

/**
 *  @brief      Convert the given string to an SAC_FF_ADDITION_POINT.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_FF_ADDITION_POINT.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_FF_ADDITION_POINT.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacFfAdditionPointFromString(const char* string, SAC_FF_ADDITION_POINT* pValue);

/**
 *  @brief      Check if value is a valid SAC_FF_ADDITION_POINT.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_FF_ADDITION_POINT.
 *  @retval     FALSE   value is not a valid SAC_FF_ADDITION_POINT.
 */
DEH_EXPORT BOOL SacFfAdditionPointIsValid(SAC_FF_ADDITION_POINT value);


//  SAC_DITHER_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_DITHER_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDitherTypeToString(SAC_DITHER_TYPE value);

/**
 *  @brief      Convert type SAC_DITHER_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDitherTypeToUserString(SAC_DITHER_TYPE value);

/**
 *  @brief      Convert type SAC_DITHER_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacDitherTypeToDescription(SAC_DITHER_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_DITHER_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_DITHER_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_DITHER_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacDitherTypeFromString(const char* string, SAC_DITHER_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_DITHER_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_DITHER_TYPE.
 *  @retval     FALSE   value is not a valid SAC_DITHER_TYPE.
 */
DEH_EXPORT BOOL SacDitherTypeIsValid(SAC_DITHER_TYPE value);


//  SAC_DMF_INPUT Conversion routines

/**
 *  @brief      Convert type SAC_DMF_INPUT to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDmfInputToString(SAC_DMF_INPUT value);

/**
 *  @brief      Convert type SAC_DMF_INPUT to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDmfInputToUserString(SAC_DMF_INPUT value);

/**
 *  @brief      Convert type SAC_DMF_INPUT to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacDmfInputToDescription(SAC_DMF_INPUT value);

/**
 *  @brief      Convert the given string to an SAC_DMF_INPUT.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_DMF_INPUT.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_DMF_INPUT.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacDmfInputFromString(const char* string, SAC_DMF_INPUT* pValue);

/**
 *  @brief      Check if value is a valid SAC_DMF_INPUT.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_DMF_INPUT.
 *  @retval     FALSE   value is not a valid SAC_DMF_INPUT.
 */
DEH_EXPORT BOOL SacDmfInputIsValid(SAC_DMF_INPUT value);


//  SAC_DMF_OUTPUT Conversion routines

/**
 *  @brief      Convert type SAC_DMF_OUTPUT to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDmfOutputToString(SAC_DMF_OUTPUT value);

/**
 *  @brief      Convert type SAC_DMF_OUTPUT to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacDmfOutputToUserString(SAC_DMF_OUTPUT value);

/**
 *  @brief      Convert type SAC_DMF_OUTPUT to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacDmfOutputToDescription(SAC_DMF_OUTPUT value);

/**
 *  @brief      Convert the given string to an SAC_DMF_OUTPUT.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_DMF_OUTPUT.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_DMF_OUTPUT.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacDmfOutputFromString(const char* string, SAC_DMF_OUTPUT* pValue);

/**
 *  @brief      Check if value is a valid SAC_DMF_OUTPUT.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_DMF_OUTPUT.
 *  @retval     FALSE   value is not a valid SAC_DMF_OUTPUT.
 */
DEH_EXPORT BOOL SacDmfOutputIsValid(SAC_DMF_OUTPUT value);


//  SAC_PARAM_SET_ID Conversion routines

/**
 *  @brief      Convert type SAC_PARAM_SET_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacParamSetIdToString(SAC_PARAM_SET_ID value);

/**
 *  @brief      Convert type SAC_PARAM_SET_ID to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacParamSetIdToUserString(SAC_PARAM_SET_ID value);

/**
 *  @brief      Convert type SAC_PARAM_SET_ID to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacParamSetIdToDescription(SAC_PARAM_SET_ID value);

/**
 *  @brief      Convert the given string to an SAC_PARAM_SET_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_PARAM_SET_ID.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_PARAM_SET_ID.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacParamSetIdFromString(const char* string, SAC_PARAM_SET_ID* pValue);

/**
 *  @brief      Check if value is a valid SAC_PARAM_SET_ID.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_PARAM_SET_ID.
 *  @retval     FALSE   value is not a valid SAC_PARAM_SET_ID.
 */
DEH_EXPORT BOOL SacParamSetIdIsValid(SAC_PARAM_SET_ID value);


//  SAC_POSITION_UNIT_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_POSITION_UNIT_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacPositionUnitTypeToString(SAC_POSITION_UNIT_TYPE value);

/**
 *  @brief      Convert type SAC_POSITION_UNIT_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacPositionUnitTypeToUserString(SAC_POSITION_UNIT_TYPE value);

/**
 *  @brief      Convert type SAC_POSITION_UNIT_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacPositionUnitTypeToDescription(SAC_POSITION_UNIT_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_POSITION_UNIT_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_POSITION_UNIT_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_POSITION_UNIT_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacPositionUnitTypeFromString(const char* string, SAC_POSITION_UNIT_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_POSITION_UNIT_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_POSITION_UNIT_TYPE.
 *  @retval     FALSE   value is not a valid SAC_POSITION_UNIT_TYPE.
 */
DEH_EXPORT BOOL SacPositionUnitTypeIsValid(SAC_POSITION_UNIT_TYPE value);


//  SAC_EVENT_ACTION Conversion routines

/**
 *  @brief      Convert type SAC_EVENT_ACTION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEventActionToString(SAC_EVENT_ACTION value);

/**
 *  @brief      Convert type SAC_EVENT_ACTION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEventActionToUserString(SAC_EVENT_ACTION value);

/**
 *  @brief      Convert type SAC_EVENT_ACTION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacEventActionToDescription(SAC_EVENT_ACTION value);

/**
 *  @brief      Convert the given string to an SAC_EVENT_ACTION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_EVENT_ACTION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_EVENT_ACTION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacEventActionFromString(const char* string, SAC_EVENT_ACTION* pValue);

/**
 *  @brief      Check if value is a valid SAC_EVENT_ACTION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_EVENT_ACTION.
 *  @retval     FALSE   value is not a valid SAC_EVENT_ACTION.
 */
DEH_EXPORT BOOL SacEventActionIsValid(SAC_EVENT_ACTION value);


//  SAC_SYNC_REQUEST Conversion routines

/**
 *  @brief      Convert type SAC_SYNC_REQUEST to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacSyncRequestToString(SAC_SYNC_REQUEST value);

/**
 *  @brief      Convert type SAC_SYNC_REQUEST to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacSyncRequestToUserString(SAC_SYNC_REQUEST value);

/**
 *  @brief      Convert type SAC_SYNC_REQUEST to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacSyncRequestToDescription(SAC_SYNC_REQUEST value);

/**
 *  @brief      Convert the given string to an SAC_SYNC_REQUEST.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_SYNC_REQUEST.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_SYNC_REQUEST.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacSyncRequestFromString(const char* string, SAC_SYNC_REQUEST* pValue);

/**
 *  @brief      Check if value is a valid SAC_SYNC_REQUEST.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_SYNC_REQUEST.
 *  @retval     FALSE   value is not a valid SAC_SYNC_REQUEST.
 */
DEH_EXPORT BOOL SacSyncRequestIsValid(SAC_SYNC_REQUEST value);


//  SAC_HALL_SENSOR_SET Conversion routines

/**
 *  @brief      Convert type SAC_HALL_SENSOR_SET to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacHallSensorSetToString(SAC_HALL_SENSOR_SET value);

/**
 *  @brief      Convert type SAC_HALL_SENSOR_SET to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacHallSensorSetToUserString(SAC_HALL_SENSOR_SET value);

/**
 *  @brief      Convert type SAC_HALL_SENSOR_SET to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacHallSensorSetToDescription(SAC_HALL_SENSOR_SET value);

/**
 *  @brief      Convert the given string to an SAC_HALL_SENSOR_SET.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_HALL_SENSOR_SET.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_HALL_SENSOR_SET.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacHallSensorSetFromString(const char* string, SAC_HALL_SENSOR_SET* pValue);

/**
 *  @brief      Check if value is a valid SAC_HALL_SENSOR_SET.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_HALL_SENSOR_SET.
 *  @retval     FALSE   value is not a valid SAC_HALL_SENSOR_SET.
 */
DEH_EXPORT BOOL SacHallSensorSetIsValid(SAC_HALL_SENSOR_SET value);


//  SAC_AXIS_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_AXIS_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacAxisTypeToString(SAC_AXIS_TYPE value);

/**
 *  @brief      Convert type SAC_AXIS_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacAxisTypeToUserString(SAC_AXIS_TYPE value);

/**
 *  @brief      Convert type SAC_AXIS_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacAxisTypeToDescription(SAC_AXIS_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_AXIS_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_AXIS_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_AXIS_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacAxisTypeFromString(const char* string, SAC_AXIS_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_AXIS_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_AXIS_TYPE.
 *  @retval     FALSE   value is not a valid SAC_AXIS_TYPE.
 */
DEH_EXPORT BOOL SacAxisTypeIsValid(SAC_AXIS_TYPE value);


//  SAC_MOTOR_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_MOTOR_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacMotorTypeToString(SAC_MOTOR_TYPE value);

/**
 *  @brief      Convert type SAC_MOTOR_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacMotorTypeToUserString(SAC_MOTOR_TYPE value);

/**
 *  @brief      Convert type SAC_MOTOR_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacMotorTypeToDescription(SAC_MOTOR_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_MOTOR_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_MOTOR_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_MOTOR_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacMotorTypeFromString(const char* string, SAC_MOTOR_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_MOTOR_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_MOTOR_TYPE.
 *  @retval     FALSE   value is not a valid SAC_MOTOR_TYPE.
 */
DEH_EXPORT BOOL SacMotorTypeIsValid(SAC_MOTOR_TYPE value);


//  SAC_POSITION_SENSOR_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_POSITION_SENSOR_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacPositionSensorTypeToString(SAC_POSITION_SENSOR_TYPE value);

/**
 *  @brief      Convert type SAC_POSITION_SENSOR_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacPositionSensorTypeToUserString(SAC_POSITION_SENSOR_TYPE value);

/**
 *  @brief      Convert type SAC_POSITION_SENSOR_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacPositionSensorTypeToDescription(SAC_POSITION_SENSOR_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_POSITION_SENSOR_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_POSITION_SENSOR_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_POSITION_SENSOR_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacPositionSensorTypeFromString(const char* string, SAC_POSITION_SENSOR_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_POSITION_SENSOR_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_POSITION_SENSOR_TYPE.
 *  @retval     FALSE   value is not a valid SAC_POSITION_SENSOR_TYPE.
 */
DEH_EXPORT BOOL SacPositionSensorTypeIsValid(SAC_POSITION_SENSOR_TYPE value);


//  SAC_PARITY_BIT Conversion routines

/**
 *  @brief      Convert type SAC_PARITY_BIT to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacParityBitToString(SAC_PARITY_BIT value);

/**
 *  @brief      Convert type SAC_PARITY_BIT to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacParityBitToUserString(SAC_PARITY_BIT value);

/**
 *  @brief      Convert type SAC_PARITY_BIT to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacParityBitToDescription(SAC_PARITY_BIT value);

/**
 *  @brief      Convert the given string to an SAC_PARITY_BIT.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_PARITY_BIT.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_PARITY_BIT.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacParityBitFromString(const char* string, SAC_PARITY_BIT* pValue);

/**
 *  @brief      Check if value is a valid SAC_PARITY_BIT.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_PARITY_BIT.
 *  @retval     FALSE   value is not a valid SAC_PARITY_BIT.
 */
DEH_EXPORT BOOL SacParityBitIsValid(SAC_PARITY_BIT value);


//  SAC_ALIGNMENT_MODE Conversion routines

/**
 *  @brief      Convert type SAC_ALIGNMENT_MODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacAlignmentModeToString(SAC_ALIGNMENT_MODE value);

/**
 *  @brief      Convert type SAC_ALIGNMENT_MODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacAlignmentModeToUserString(SAC_ALIGNMENT_MODE value);

/**
 *  @brief      Convert type SAC_ALIGNMENT_MODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacAlignmentModeToDescription(SAC_ALIGNMENT_MODE value);

/**
 *  @brief      Convert the given string to an SAC_ALIGNMENT_MODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_ALIGNMENT_MODE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_ALIGNMENT_MODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacAlignmentModeFromString(const char* string, SAC_ALIGNMENT_MODE* pValue);

/**
 *  @brief      Check if value is a valid SAC_ALIGNMENT_MODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_ALIGNMENT_MODE.
 *  @retval     FALSE   value is not a valid SAC_ALIGNMENT_MODE.
 */
DEH_EXPORT BOOL SacAlignmentModeIsValid(SAC_ALIGNMENT_MODE value);


//  SAC_H_BRIDGE_STATE_AT_POWER_DISABLED Conversion routines

/**
 *  @brief      Convert type SAC_H_BRIDGE_STATE_AT_POWER_DISABLED to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacHBridgeStateAtPowerDisabledToString(SAC_H_BRIDGE_STATE_AT_POWER_DISABLED value);

/**
 *  @brief      Convert type SAC_H_BRIDGE_STATE_AT_POWER_DISABLED to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacHBridgeStateAtPowerDisabledToUserString(SAC_H_BRIDGE_STATE_AT_POWER_DISABLED value);

/**
 *  @brief      Convert type SAC_H_BRIDGE_STATE_AT_POWER_DISABLED to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacHBridgeStateAtPowerDisabledToDescription(SAC_H_BRIDGE_STATE_AT_POWER_DISABLED value);

/**
 *  @brief      Convert the given string to an SAC_H_BRIDGE_STATE_AT_POWER_DISABLED.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_H_BRIDGE_STATE_AT_POWER_DISABLED.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_H_BRIDGE_STATE_AT_POWER_DISABLED.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacHBridgeStateAtPowerDisabledFromString(const char* string, SAC_H_BRIDGE_STATE_AT_POWER_DISABLED* pValue);

/**
 *  @brief      Check if value is a valid SAC_H_BRIDGE_STATE_AT_POWER_DISABLED.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_H_BRIDGE_STATE_AT_POWER_DISABLED.
 *  @retval     FALSE   value is not a valid SAC_H_BRIDGE_STATE_AT_POWER_DISABLED.
 */
DEH_EXPORT BOOL SacHBridgeStateAtPowerDisabledIsValid(SAC_H_BRIDGE_STATE_AT_POWER_DISABLED value);


//  SAC_MOVE_CURRENT_ANGLE_STATE Conversion routines

/**
 *  @brief      Convert type SAC_MOVE_CURRENT_ANGLE_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacMoveCurrentAngleStateToString(SAC_MOVE_CURRENT_ANGLE_STATE value);

/**
 *  @brief      Convert type SAC_MOVE_CURRENT_ANGLE_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacMoveCurrentAngleStateToUserString(SAC_MOVE_CURRENT_ANGLE_STATE value);

/**
 *  @brief      Convert type SAC_MOVE_CURRENT_ANGLE_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacMoveCurrentAngleStateToDescription(SAC_MOVE_CURRENT_ANGLE_STATE value);

/**
 *  @brief      Convert the given string to an SAC_MOVE_CURRENT_ANGLE_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_MOVE_CURRENT_ANGLE_STATE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_MOVE_CURRENT_ANGLE_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacMoveCurrentAngleStateFromString(const char* string, SAC_MOVE_CURRENT_ANGLE_STATE* pValue);

/**
 *  @brief      Check if value is a valid SAC_MOVE_CURRENT_ANGLE_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_MOVE_CURRENT_ANGLE_STATE.
 *  @retval     FALSE   value is not a valid SAC_MOVE_CURRENT_ANGLE_STATE.
 */
DEH_EXPORT BOOL SacMoveCurrentAngleStateIsValid(SAC_MOVE_CURRENT_ANGLE_STATE value);


//  SAC_STATE Conversion routines

/**
 *  @brief      Convert type SAC_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacStateToString(SAC_STATE value);

/**
 *  @brief      Convert type SAC_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacStateToUserString(SAC_STATE value);

/**
 *  @brief      Convert type SAC_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacStateToDescription(SAC_STATE value);

/**
 *  @brief      Convert the given string to an SAC_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_STATE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacStateFromString(const char* string, SAC_STATE* pValue);

/**
 *  @brief      Check if value is a valid SAC_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_STATE.
 *  @retval     FALSE   value is not a valid SAC_STATE.
 */
DEH_EXPORT BOOL SacStateIsValid(SAC_STATE value);


//  SAC_SPG_STATE Conversion routines

/**
 *  @brief      Convert type SAC_SPG_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacSpgStateToString(SAC_SPG_STATE value);

/**
 *  @brief      Convert type SAC_SPG_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacSpgStateToUserString(SAC_SPG_STATE value);

/**
 *  @brief      Convert type SAC_SPG_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacSpgStateToDescription(SAC_SPG_STATE value);

/**
 *  @brief      Convert the given string to an SAC_SPG_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_SPG_STATE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_SPG_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacSpgStateFromString(const char* string, SAC_SPG_STATE* pValue);

/**
 *  @brief      Check if value is a valid SAC_SPG_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_SPG_STATE.
 *  @retval     FALSE   value is not a valid SAC_SPG_STATE.
 */
DEH_EXPORT BOOL SacSpgStateIsValid(SAC_SPG_STATE value);


//  SAC_IO_FUNCTION Conversion routines

/**
 *  @brief      Convert type SAC_IO_FUNCTION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacIoFunctionToString(SAC_IO_FUNCTION value);

/**
 *  @brief      Convert type SAC_IO_FUNCTION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacIoFunctionToUserString(SAC_IO_FUNCTION value);

/**
 *  @brief      Convert type SAC_IO_FUNCTION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacIoFunctionToDescription(SAC_IO_FUNCTION value);

/**
 *  @brief      Convert the given string to an SAC_IO_FUNCTION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_IO_FUNCTION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_IO_FUNCTION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacIoFunctionFromString(const char* string, SAC_IO_FUNCTION* pValue);

/**
 *  @brief      Check if value is a valid SAC_IO_FUNCTION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_IO_FUNCTION.
 *  @retval     FALSE   value is not a valid SAC_IO_FUNCTION.
 */
DEH_EXPORT BOOL SacIoFunctionIsValid(SAC_IO_FUNCTION value);


//  SAC_ENCODER_ERROR Conversion routines

/**
 *  @brief      Convert type SAC_ENCODER_ERROR to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEncoderErrorToString(SAC_ENCODER_ERROR value);

/**
 *  @brief      Convert type SAC_ENCODER_ERROR to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEncoderErrorToUserString(SAC_ENCODER_ERROR value);

/**
 *  @brief      Convert type SAC_ENCODER_ERROR to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacEncoderErrorToDescription(SAC_ENCODER_ERROR value);

/**
 *  @brief      Convert the given string to an SAC_ENCODER_ERROR.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_ENCODER_ERROR.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_ENCODER_ERROR.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacEncoderErrorFromString(const char* string, SAC_ENCODER_ERROR* pValue);

/**
 *  @brief      Check if value is a valid SAC_ENCODER_ERROR.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_ENCODER_ERROR.
 *  @retval     FALSE   value is not a valid SAC_ENCODER_ERROR.
 */
DEH_EXPORT BOOL SacEncoderErrorIsValid(SAC_ENCODER_ERROR value);


//  SAC_ERROR_HANDLER Conversion routines

/**
 *  @brief      Convert type SAC_ERROR_HANDLER to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacErrorHandlerToString(SAC_ERROR_HANDLER value);

/**
 *  @brief      Convert type SAC_ERROR_HANDLER to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacErrorHandlerToUserString(SAC_ERROR_HANDLER value);

/**
 *  @brief      Convert type SAC_ERROR_HANDLER to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacErrorHandlerToDescription(SAC_ERROR_HANDLER value);

/**
 *  @brief      Convert the given string to an SAC_ERROR_HANDLER.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_ERROR_HANDLER.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_ERROR_HANDLER.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacErrorHandlerFromString(const char* string, SAC_ERROR_HANDLER* pValue);

/**
 *  @brief      Check if value is a valid SAC_ERROR_HANDLER.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_ERROR_HANDLER.
 *  @retval     FALSE   value is not a valid SAC_ERROR_HANDLER.
 */
DEH_EXPORT BOOL SacErrorHandlerIsValid(SAC_ERROR_HANDLER value);


//  SAC_REFERENCE Conversion routines

/**
 *  @brief      Convert type SAC_REFERENCE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacReferenceToString(SAC_REFERENCE value);

/**
 *  @brief      Convert type SAC_REFERENCE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacReferenceToUserString(SAC_REFERENCE value);

/**
 *  @brief      Convert type SAC_REFERENCE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacReferenceToDescription(SAC_REFERENCE value);

/**
 *  @brief      Convert the given string to an SAC_REFERENCE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_REFERENCE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_REFERENCE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacReferenceFromString(const char* string, SAC_REFERENCE* pValue);

/**
 *  @brief      Check if value is a valid SAC_REFERENCE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_REFERENCE.
 *  @retval     FALSE   value is not a valid SAC_REFERENCE.
 */
DEH_EXPORT BOOL SacReferenceIsValid(SAC_REFERENCE value);


//  SAC_ECG_POSITION_SOURCE Conversion routines

/**
 *  @brief      Convert type SAC_ECG_POSITION_SOURCE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEcgPositionSourceToString(SAC_ECG_POSITION_SOURCE value);

/**
 *  @brief      Convert type SAC_ECG_POSITION_SOURCE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEcgPositionSourceToUserString(SAC_ECG_POSITION_SOURCE value);

/**
 *  @brief      Convert type SAC_ECG_POSITION_SOURCE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacEcgPositionSourceToDescription(SAC_ECG_POSITION_SOURCE value);

/**
 *  @brief      Convert the given string to an SAC_ECG_POSITION_SOURCE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_ECG_POSITION_SOURCE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_ECG_POSITION_SOURCE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacEcgPositionSourceFromString(const char* string, SAC_ECG_POSITION_SOURCE* pValue);

/**
 *  @brief      Check if value is a valid SAC_ECG_POSITION_SOURCE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_ECG_POSITION_SOURCE.
 *  @retval     FALSE   value is not a valid SAC_ECG_POSITION_SOURCE.
 */
DEH_EXPORT BOOL SacEcgPositionSourceIsValid(SAC_ECG_POSITION_SOURCE value);


//  SAC_ECG_LOCK_MODE Conversion routines

/**
 *  @brief      Convert type SAC_ECG_LOCK_MODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEcgLockModeToString(SAC_ECG_LOCK_MODE value);

/**
 *  @brief      Convert type SAC_ECG_LOCK_MODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacEcgLockModeToUserString(SAC_ECG_LOCK_MODE value);

/**
 *  @brief      Convert type SAC_ECG_LOCK_MODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacEcgLockModeToDescription(SAC_ECG_LOCK_MODE value);

/**
 *  @brief      Convert the given string to an SAC_ECG_LOCK_MODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_ECG_LOCK_MODE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_ECG_LOCK_MODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacEcgLockModeFromString(const char* string, SAC_ECG_LOCK_MODE* pValue);

/**
 *  @brief      Check if value is a valid SAC_ECG_LOCK_MODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_ECG_LOCK_MODE.
 *  @retval     FALSE   value is not a valid SAC_ECG_LOCK_MODE.
 */
DEH_EXPORT BOOL SacEcgLockModeIsValid(SAC_ECG_LOCK_MODE value);


//  MAC_SYNC_ACTION Conversion routines

/**
 *  @brief      Convert type MAC_SYNC_ACTION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API MacSyncActionToString(MAC_SYNC_ACTION value);

/**
 *  @brief      Convert type MAC_SYNC_ACTION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API MacSyncActionToUserString(MAC_SYNC_ACTION value);

/**
 *  @brief      Convert type MAC_SYNC_ACTION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API MacSyncActionToDescription(MAC_SYNC_ACTION value);

/**
 *  @brief      Convert the given string to an MAC_SYNC_ACTION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid MAC_SYNC_ACTION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to MAC_SYNC_ACTION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API MacSyncActionFromString(const char* string, MAC_SYNC_ACTION* pValue);

/**
 *  @brief      Check if value is a valid MAC_SYNC_ACTION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid MAC_SYNC_ACTION.
 *  @retval     FALSE   value is not a valid MAC_SYNC_ACTION.
 */
DEH_EXPORT BOOL MacSyncActionIsValid(MAC_SYNC_ACTION value);


//  SAC_TEST_SIGNAL_TYPE Conversion routines

/**
 *  @brief      Convert type SAC_TEST_SIGNAL_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTestSignalTypeToString(SAC_TEST_SIGNAL_TYPE value);

/**
 *  @brief      Convert type SAC_TEST_SIGNAL_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTestSignalTypeToUserString(SAC_TEST_SIGNAL_TYPE value);

/**
 *  @brief      Convert type SAC_TEST_SIGNAL_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacTestSignalTypeToDescription(SAC_TEST_SIGNAL_TYPE value);

/**
 *  @brief      Convert the given string to an SAC_TEST_SIGNAL_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_TEST_SIGNAL_TYPE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_TEST_SIGNAL_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacTestSignalTypeFromString(const char* string, SAC_TEST_SIGNAL_TYPE* pValue);

/**
 *  @brief      Check if value is a valid SAC_TEST_SIGNAL_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_TEST_SIGNAL_TYPE.
 *  @retval     FALSE   value is not a valid SAC_TEST_SIGNAL_TYPE.
 */
DEH_EXPORT BOOL SacTestSignalTypeIsValid(SAC_TEST_SIGNAL_TYPE value);


//  SAC_TEST_SIGNAL_INJECT_POINT_ID Conversion routines

/**
 *  @brief      Convert type SAC_TEST_SIGNAL_INJECT_POINT_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTestSignalInjectPointIdToString(SAC_TEST_SIGNAL_INJECT_POINT_ID value);

/**
 *  @brief      Convert type SAC_TEST_SIGNAL_INJECT_POINT_ID to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTestSignalInjectPointIdToUserString(SAC_TEST_SIGNAL_INJECT_POINT_ID value);

/**
 *  @brief      Convert type SAC_TEST_SIGNAL_INJECT_POINT_ID to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacTestSignalInjectPointIdToDescription(SAC_TEST_SIGNAL_INJECT_POINT_ID value);

/**
 *  @brief      Convert the given string to an SAC_TEST_SIGNAL_INJECT_POINT_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_TEST_SIGNAL_INJECT_POINT_ID.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_TEST_SIGNAL_INJECT_POINT_ID.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacTestSignalInjectPointIdFromString(const char* string, SAC_TEST_SIGNAL_INJECT_POINT_ID* pValue);

/**
 *  @brief      Check if value is a valid SAC_TEST_SIGNAL_INJECT_POINT_ID.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_TEST_SIGNAL_INJECT_POINT_ID.
 *  @retval     FALSE   value is not a valid SAC_TEST_SIGNAL_INJECT_POINT_ID.
 */
DEH_EXPORT BOOL SacTestSignalInjectPointIdIsValid(SAC_TEST_SIGNAL_INJECT_POINT_ID value);


//  SAC_MARKER_DIRECTION Conversion routines

/**
 *  @brief      Convert type SAC_MARKER_DIRECTION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacMarkerDirectionToString(SAC_MARKER_DIRECTION value);

/**
 *  @brief      Convert type SAC_MARKER_DIRECTION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacMarkerDirectionToUserString(SAC_MARKER_DIRECTION value);

/**
 *  @brief      Convert type SAC_MARKER_DIRECTION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacMarkerDirectionToDescription(SAC_MARKER_DIRECTION value);

/**
 *  @brief      Convert the given string to an SAC_MARKER_DIRECTION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_MARKER_DIRECTION.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_MARKER_DIRECTION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacMarkerDirectionFromString(const char* string, SAC_MARKER_DIRECTION* pValue);

/**
 *  @brief      Check if value is a valid SAC_MARKER_DIRECTION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_MARKER_DIRECTION.
 *  @retval     FALSE   value is not a valid SAC_MARKER_DIRECTION.
 */
DEH_EXPORT BOOL SacMarkerDirectionIsValid(SAC_MARKER_DIRECTION value);


//  SAC_TWEAK_MODE Conversion routines

/**
 *  @brief      Convert type SAC_TWEAK_MODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTweakModeToString(SAC_TWEAK_MODE value);

/**
 *  @brief      Convert type SAC_TWEAK_MODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTweakModeToUserString(SAC_TWEAK_MODE value);

/**
 *  @brief      Convert type SAC_TWEAK_MODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacTweakModeToDescription(SAC_TWEAK_MODE value);

/**
 *  @brief      Convert the given string to an SAC_TWEAK_MODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_TWEAK_MODE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_TWEAK_MODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacTweakModeFromString(const char* string, SAC_TWEAK_MODE* pValue);

/**
 *  @brief      Check if value is a valid SAC_TWEAK_MODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_TWEAK_MODE.
 *  @retval     FALSE   value is not a valid SAC_TWEAK_MODE.
 */
DEH_EXPORT BOOL SacTweakModeIsValid(SAC_TWEAK_MODE value);


//  SAC_TWEAK_POSITION_SOURCE Conversion routines

/**
 *  @brief      Convert type SAC_TWEAK_POSITION_SOURCE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTweakPositionSourceToString(SAC_TWEAK_POSITION_SOURCE value);

/**
 *  @brief      Convert type SAC_TWEAK_POSITION_SOURCE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacTweakPositionSourceToUserString(SAC_TWEAK_POSITION_SOURCE value);

/**
 *  @brief      Convert type SAC_TWEAK_POSITION_SOURCE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacTweakPositionSourceToDescription(SAC_TWEAK_POSITION_SOURCE value);

/**
 *  @brief      Convert the given string to an SAC_TWEAK_POSITION_SOURCE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_TWEAK_POSITION_SOURCE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_TWEAK_POSITION_SOURCE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacTweakPositionSourceFromString(const char* string, SAC_TWEAK_POSITION_SOURCE* pValue);

/**
 *  @brief      Check if value is a valid SAC_TWEAK_POSITION_SOURCE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_TWEAK_POSITION_SOURCE.
 *  @retval     FALSE   value is not a valid SAC_TWEAK_POSITION_SOURCE.
 */
DEH_EXPORT BOOL SacTweakPositionSourceIsValid(SAC_TWEAK_POSITION_SOURCE value);


//  SAC_POS_UPDATE_MODE Conversion routines

/**
 *  @brief      Convert type SAC_POS_UPDATE_MODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacPosUpdateModeToString(SAC_POS_UPDATE_MODE value);

/**
 *  @brief      Convert type SAC_POS_UPDATE_MODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SacPosUpdateModeToUserString(SAC_POS_UPDATE_MODE value);

/**
 *  @brief      Convert type SAC_POS_UPDATE_MODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SacPosUpdateModeToDescription(SAC_POS_UPDATE_MODE value);

/**
 *  @brief      Convert the given string to an SAC_POS_UPDATE_MODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SAC_POS_UPDATE_MODE.
 *  @retval     SAC_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SAC_ERR_UNKNOWN_ENUM_STRING string could not be converted to SAC_POS_UPDATE_MODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SacPosUpdateModeFromString(const char* string, SAC_POS_UPDATE_MODE* pValue);

/**
 *  @brief      Check if value is a valid SAC_POS_UPDATE_MODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SAC_POS_UPDATE_MODE.
 *  @retval     FALSE   value is not a valid SAC_POS_UPDATE_MODE.
 */
DEH_EXPORT BOOL SacPosUpdateModeIsValid(SAC_POS_UPDATE_MODE value);


/**
 *  @}
 */
#ifdef __cplusplus
}
#endif

#endif
