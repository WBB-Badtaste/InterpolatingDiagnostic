/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name:   NYCe4000
 *  Component Name: support
 *  Subsystem Name: deh
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_enum_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/**
 *  @file
 *  @brief  Enum conversion functions for sim.
 *  
 *  For every enum in the sim subsystem the following type to string conversion functions exist:
 *  - "<TYPE>ToString(TYPE)"            Convert the given value of "<TYPE>" to its exact string representation.
 *  - "<TYPE>ToUserString(TYPE)"        Convert the given value of "<TYPE>" to a human readable string.
 *  - "<TYPE>ToDescription(TYPE)"       Convert the given value of "<TYPE>" to a descriptive string.
 *  - "<TYPE>FromString(string, TYPE)"  Convert the given string to value of "<TYPE>".
 *  - "<TYPE>IsValid(TYPE)"             Checks if the given value of "<TYPE>" is valid.
 */

#ifndef __SIMENUMS_H__
#define __SIMENUMS_H__

#include "simapi.h"

#ifndef DEH_EXPORT
    #ifdef WIN32
        #define DEH_EXPORT __declspec(dllimport)
    #else
        #define DEH_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif
/**
 *  @addtogroup sim_conversion
 *  @{
 */

//  DIG_IO_STATE Conversion routines

/**
 *  @brief      Convert type DIG_IO_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API DigIoStateToString(DIG_IO_STATE value);

/**
 *  @brief      Convert type DIG_IO_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API DigIoStateToUserString(DIG_IO_STATE value);

/**
 *  @brief      Convert type DIG_IO_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API DigIoStateToDescription(DIG_IO_STATE value);

/**
 *  @brief      Convert the given string to an DIG_IO_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid DIG_IO_STATE.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to DIG_IO_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API DigIoStateFromString(const char* string, DIG_IO_STATE* pValue);

/**
 *  @brief      Check if value is a valid DIG_IO_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid DIG_IO_STATE.
 *  @retval     FALSE   value is not a valid DIG_IO_STATE.
 */
DEH_EXPORT BOOL DigIoStateIsValid(DIG_IO_STATE value);


//  LED_COLOR Conversion routines

/**
 *  @brief      Convert type LED_COLOR to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API LedColorToString(LED_COLOR value);

/**
 *  @brief      Convert type LED_COLOR to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API LedColorToUserString(LED_COLOR value);

/**
 *  @brief      Convert type LED_COLOR to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API LedColorToDescription(LED_COLOR value);

/**
 *  @brief      Convert the given string to an LED_COLOR.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid LED_COLOR.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to LED_COLOR.
 */
DEH_EXPORT NYCE_STATUS NYCE_API LedColorFromString(const char* string, LED_COLOR* pValue);

/**
 *  @brief      Check if value is a valid LED_COLOR.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid LED_COLOR.
 *  @retval     FALSE   value is not a valid LED_COLOR.
 */
DEH_EXPORT BOOL LedColorIsValid(LED_COLOR value);


//  SIM_AXIS_ALARM Conversion routines

/**
 *  @brief      Convert type SIM_AXIS_ALARM to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimAxisAlarmToString(SIM_AXIS_ALARM value);

/**
 *  @brief      Convert type SIM_AXIS_ALARM to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimAxisAlarmToUserString(SIM_AXIS_ALARM value);

/**
 *  @brief      Convert type SIM_AXIS_ALARM to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SimAxisAlarmToDescription(SIM_AXIS_ALARM value);

/**
 *  @brief      Convert the given string to an SIM_AXIS_ALARM.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SIM_AXIS_ALARM.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to SIM_AXIS_ALARM.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SimAxisAlarmFromString(const char* string, SIM_AXIS_ALARM* pValue);

/**
 *  @brief      Check if value is a valid SIM_AXIS_ALARM.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SIM_AXIS_ALARM.
 *  @retval     FALSE   value is not a valid SIM_AXIS_ALARM.
 */
DEH_EXPORT BOOL SimAxisAlarmIsValid(SIM_AXIS_ALARM value);


//  SIM_INDRA_DRIVE_STATE Conversion routines

/**
 *  @brief      Convert type SIM_INDRA_DRIVE_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimIndraDriveStateToString(SIM_INDRA_DRIVE_STATE value);

/**
 *  @brief      Convert type SIM_INDRA_DRIVE_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimIndraDriveStateToUserString(SIM_INDRA_DRIVE_STATE value);

/**
 *  @brief      Convert type SIM_INDRA_DRIVE_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SimIndraDriveStateToDescription(SIM_INDRA_DRIVE_STATE value);

/**
 *  @brief      Convert the given string to an SIM_INDRA_DRIVE_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SIM_INDRA_DRIVE_STATE.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to SIM_INDRA_DRIVE_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SimIndraDriveStateFromString(const char* string, SIM_INDRA_DRIVE_STATE* pValue);

/**
 *  @brief      Check if value is a valid SIM_INDRA_DRIVE_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SIM_INDRA_DRIVE_STATE.
 *  @retval     FALSE   value is not a valid SIM_INDRA_DRIVE_STATE.
 */
DEH_EXPORT BOOL SimIndraDriveStateIsValid(SIM_INDRA_DRIVE_STATE value);


//  SIM_SDC_MEMORY_BLOCK_ID Conversion routines

/**
 *  @brief      Convert type SIM_SDC_MEMORY_BLOCK_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcMemoryBlockIdToString(SIM_SDC_MEMORY_BLOCK_ID value);

/**
 *  @brief      Convert type SIM_SDC_MEMORY_BLOCK_ID to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcMemoryBlockIdToUserString(SIM_SDC_MEMORY_BLOCK_ID value);

/**
 *  @brief      Convert type SIM_SDC_MEMORY_BLOCK_ID to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcMemoryBlockIdToDescription(SIM_SDC_MEMORY_BLOCK_ID value);

/**
 *  @brief      Convert the given string to an SIM_SDC_MEMORY_BLOCK_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SIM_SDC_MEMORY_BLOCK_ID.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to SIM_SDC_MEMORY_BLOCK_ID.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SimSdcMemoryBlockIdFromString(const char* string, SIM_SDC_MEMORY_BLOCK_ID* pValue);

/**
 *  @brief      Check if value is a valid SIM_SDC_MEMORY_BLOCK_ID.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SIM_SDC_MEMORY_BLOCK_ID.
 *  @retval     FALSE   value is not a valid SIM_SDC_MEMORY_BLOCK_ID.
 */
DEH_EXPORT BOOL SimSdcMemoryBlockIdIsValid(SIM_SDC_MEMORY_BLOCK_ID value);


//  SIM_SDC_COMMUNICATION_ERROR Conversion routines

/**
 *  @brief      Convert type SIM_SDC_COMMUNICATION_ERROR to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcCommunicationErrorToString(SIM_SDC_COMMUNICATION_ERROR value);

/**
 *  @brief      Convert type SIM_SDC_COMMUNICATION_ERROR to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcCommunicationErrorToUserString(SIM_SDC_COMMUNICATION_ERROR value);

/**
 *  @brief      Convert type SIM_SDC_COMMUNICATION_ERROR to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcCommunicationErrorToDescription(SIM_SDC_COMMUNICATION_ERROR value);

/**
 *  @brief      Convert the given string to an SIM_SDC_COMMUNICATION_ERROR.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SIM_SDC_COMMUNICATION_ERROR.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to SIM_SDC_COMMUNICATION_ERROR.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SimSdcCommunicationErrorFromString(const char* string, SIM_SDC_COMMUNICATION_ERROR* pValue);

/**
 *  @brief      Check if value is a valid SIM_SDC_COMMUNICATION_ERROR.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SIM_SDC_COMMUNICATION_ERROR.
 *  @retval     FALSE   value is not a valid SIM_SDC_COMMUNICATION_ERROR.
 */
DEH_EXPORT BOOL SimSdcCommunicationErrorIsValid(SIM_SDC_COMMUNICATION_ERROR value);


//  SIM_SDC_PORT_ID Conversion routines

/**
 *  @brief      Convert type SIM_SDC_PORT_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcPortIdToString(SIM_SDC_PORT_ID value);

/**
 *  @brief      Convert type SIM_SDC_PORT_ID to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcPortIdToUserString(SIM_SDC_PORT_ID value);

/**
 *  @brief      Convert type SIM_SDC_PORT_ID to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API SimSdcPortIdToDescription(SIM_SDC_PORT_ID value);

/**
 *  @brief      Convert the given string to an SIM_SDC_PORT_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                     string is successfully converted to a valid SIM_SDC_PORT_ID.
 *  @retval     SIM_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     SIM_ERR_UNKNOWN_ENUM_STRING string could not be converted to SIM_SDC_PORT_ID.
 */
DEH_EXPORT NYCE_STATUS NYCE_API SimSdcPortIdFromString(const char* string, SIM_SDC_PORT_ID* pValue);

/**
 *  @brief      Check if value is a valid SIM_SDC_PORT_ID.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid SIM_SDC_PORT_ID.
 *  @retval     FALSE   value is not a valid SIM_SDC_PORT_ID.
 */
DEH_EXPORT BOOL SimSdcPortIdIsValid(SIM_SDC_PORT_ID value);


/**
 *  @}
 */
#ifdef __cplusplus
}
#endif

#endif
