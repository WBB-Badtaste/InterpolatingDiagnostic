/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name  : NYCe4000
 *  Component Name: HOSTSW
 *  Subsystem Name: SAC
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_par_var_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/*!
 *  @file
 *  @brief  Definition file for the variable conversion functions for the subsystems SAC.
 *
 *  For the SAC_VAR_ID type, the following support functions exist:
 *  - SAC_VAR_ID_NR_OF_IDS                    Number of SAC variables.
 *  - SacVarIdNrOfIds()                       Retrieve the number of SAC variables.
 *  - SacVarIdByIndex(index, *SAC_VAR_ID)     Retrieve the n-th SAC variable.
 *  - SacVarIdToString(SAC_VAR_ID)            Retrieve the name of SAC variable.
 *  - SacVarIdToUserString(SAC_VAR_ID)        Retrieve a human readable string for SAC variable.
 *  - SacVarIdFromString(string, *SAC_VAR_ID) Retrieve the SAC variable representing the string.
 *  - SacVarIdGetDescription(SAC_VAR_ID)      Retrieve the description of SAC variable.
 *  - SacVarIdGetUnit(SAC_VAR_ID)             Retrieve the unit of SAC variable.
 *  - SacVarIdIsValid(SAC_VAR_ID)             Checks if the given value of SAC variable is valid.
 *  - SacVarIdGetCategory(SAC_VAR_ID)         Retrieve the category of SAC variable.
 *  - SacVarIdGetDataType(SAC_VAR_ID)         Retrieve the data type of SAC variable.
 */

#ifndef __SAC_VAR_CONVERSION_H__
#define __SAC_VAR_CONVERSION_H__

#include "sacfclvariables.h"
#include "sacvariables.h"

#ifndef SAC_EXPORT
    #ifdef WIN32
        #define SAC_EXPORT __declspec(dllimport)
    #else
        #define SAC_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  @addtogroup sac_conversion
 *  @{
 */

/**
 *  Every variable belongs to a category.
 *  These categories are used in the NYCe tools to show sets of variables.
 */
typedef enum sac_var_category
{
    SAC_VAR_CATEGORY_UNSPECIFIED,
    SAC_VAR_CATEGORY_SAC,
    SAC_VAR_CATEGORY_AXIS_VARIABLES,
    SAC_VAR_CATEGORY_LMS_VARIABLES,
    SAC_VAR_CATEGORY_HSD_VARIABLES,
    SAC_VAR_CATEGORY_UDC_VARIABLES,
    SAC_VAR_CATEGORY_ASYNC_VARIABLES
} SAC_VAR_CATEGORY;

// SAC variable conversion functions

/**
 *  @brief      Number of SAC_VAR_IDs.
 */
#define SAC_VAR_NR_OF_IDS 178

/**
 *  @brief      Retrieve the number of SAC_VAR_IDs.
 *
 *  @return     Number of SAC_VAR_IDs.
 */
SAC_EXPORT uint32_t SacVarIdNrOfIds(void);

/**
 *  @brief      Retrieve the n-th SAC_VAR_ID.
 *
 *  @param[in]  index   The index within SAC_VAR_NR_OF_IDS to retrieve.
 *  @param[out] pValue  The value of the n-th sac variable.
 *
 *  @retval     NYCE_OK                         variable successfully retrieved.
 *  @retval     SAC_ERR_INVALID_PARAMETER       pValue is NULL.
 *  @retval     SAC_ERR_PARAMETER_OUT_OF_RANGE  index is out of range.
 */
SAC_EXPORT NYCE_STATUS SacVarIdByIndex(uint32_t index, SAC_VAR_ID* pValue);

/**
 *  @brief      Convert type SAC_VAR_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
SAC_EXPORT const char* SacVarIdToString(SAC_VAR_ID value);

/**
 *  @brief      Convert type SAC_VAR_ID to a human readable string.
 *
 *  @param[in]  value   The variable to convert.
 *
 *  @return     The human readable string representation of value.
 */
SAC_EXPORT const char* SacVarIdToUserString(SAC_VAR_ID value);

/**
 *  @brief      Convert the given string to an SAC_VAR_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The variable id of string.
 *
 *  @retval     NYCE_OK                   string is successfully converted to a valid SAC_VAR_ID.
 *  @retval     SAC_ERR_INVALID_PARAMETER string or pValue is NULL.
 *  @retval     SAC_ERR_INVALID_STRING    string could not be converted to SAC_VAR_ID.
 */
SAC_EXPORT NYCE_STATUS SacVarIdFromString(const char* string, SAC_VAR_ID* pValue);

/**
 *  @brief      Retrieve the description of SAC_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The description of the variable.
 */
SAC_EXPORT const char* SacVarIdGetDescription(SAC_VAR_ID value);

/**
 *  @brief      Retrieve the unit type of a SAC_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The unit of the variable.
 */
SAC_EXPORT const char* SacVarIdGetUnit(SAC_VAR_ID value);

/**
 *  @brief      Check if value is a valid SAC_VAR_ID.
 *
 *  @param[in]  value   The variable to check.
 *
 *  @retval     TRUE    value is a valid sac variable.
 *  @retval     FALSE   value is an invalid sac variable.
 */
SAC_EXPORT BOOL SacVarIdIsValid(SAC_VAR_ID value);

/**
 *  @brief      Retrieve the category of SAC_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The category of the variable.
 */
SAC_EXPORT SAC_VAR_CATEGORY SacVarIdGetCategory(SAC_VAR_ID value);

/**
 *  @brief      Retrieve the data type of SAC_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The data type of the variable.
 */
SAC_EXPORT NYCE_DATA_TYPE SacVarIdGetDataType(SAC_VAR_ID value);

/**
 *  @}
 */

#ifdef __cplusplus
}
#endif

#endif
