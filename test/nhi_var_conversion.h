/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name  : NYCe4000
 *  Component Name: HOSTSW
 *  Subsystem Name: NHI
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_par_var_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/*!
 *  @file
 *  @brief  Definition file for the variable conversion functions for the subsystems NHI.
 *
 *  For the NHI_VAR_ID type, the following support functions exist:
 *  - NHI_VAR_ID_NR_OF_IDS                    Number of NHI variables.
 *  - NhiVarIdNrOfIds()                       Retrieve the number of NHI variables.
 *  - NhiVarIdByIndex(index, *NHI_VAR_ID)     Retrieve the n-th NHI variable.
 *  - NhiVarIdToString(NHI_VAR_ID)            Retrieve the name of NHI variable.
 *  - NhiVarIdToUserString(NHI_VAR_ID)        Retrieve a human readable string for NHI variable.
 *  - NhiVarIdFromString(string, *NHI_VAR_ID) Retrieve the NHI variable representing the string.
 *  - NhiVarIdGetDescription(NHI_VAR_ID)      Retrieve the description of NHI variable.
 *  - NhiVarIdGetUnit(NHI_VAR_ID)             Retrieve the unit of NHI variable.
 *  - NhiVarIdIsValid(NHI_VAR_ID)             Checks if the given value of NHI variable is valid.
 *  - NhiVarIdGetCategory(NHI_VAR_ID)         Retrieve the category of NHI variable.
 *  - NhiVarIdGetDataType(NHI_VAR_ID)         Retrieve the data type of NHI variable.
 */

#ifndef __NHI_VAR_CONVERSION_H__
#define __NHI_VAR_CONVERSION_H__

#include "nhivariables.h"

#ifndef NHI_EXPORT
    #ifdef WIN32
        #define NHI_EXPORT __declspec(dllimport)
    #else
        #define NHI_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  @addtogroup nhi_conversion
 *  @{
 */

/**
 *  Every variable belongs to a category.
 *  These categories are used in the NYCe tools to show sets of variables.
 */
typedef enum nhi_var_category
{
    NHI_VAR_CATEGORY_UNSPECIFIED,
    NHI_VAR_CATEGORY_NHI_VARIABLES,
    NHI_VAR_CATEGORY_NODE_VARIABLES,
    NHI_VAR_CATEGORY_NHI_USER_VARIABLES,
    NHI_VAR_CATEGORY_NHI_DEBUG,
    NHI_VAR_CATEGORY_SDC_VARIABLES,
    NHI_VAR_CATEGORY_DRIVE_VARIABLES
} NHI_VAR_CATEGORY;

// NHI variable conversion functions

/**
 *  @brief      Number of NHI_VAR_IDs.
 */
#define NHI_VAR_NR_OF_IDS 124

/**
 *  @brief      Retrieve the number of NHI_VAR_IDs.
 *
 *  @return     Number of NHI_VAR_IDs.
 */
NHI_EXPORT uint32_t NhiVarIdNrOfIds(void);

/**
 *  @brief      Retrieve the n-th NHI_VAR_ID.
 *
 *  @param[in]  index   The index within NHI_VAR_NR_OF_IDS to retrieve.
 *  @param[out] pValue  The value of the n-th nhi variable.
 *
 *  @retval     NYCE_OK                         variable successfully retrieved.
 *  @retval     NHI_ERR_INVALID_PARAMETER       pValue is NULL.
 *  @retval     NHI_ERR_PARAMETER_OUT_OF_RANGE  index is out of range.
 */
NHI_EXPORT NYCE_STATUS NhiVarIdByIndex(uint32_t index, NHI_VAR_ID* pValue);

/**
 *  @brief      Convert type NHI_VAR_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
NHI_EXPORT const char* NhiVarIdToString(NHI_VAR_ID value);

/**
 *  @brief      Convert type NHI_VAR_ID to a human readable string.
 *
 *  @param[in]  value   The variable to convert.
 *
 *  @return     The human readable string representation of value.
 */
NHI_EXPORT const char* NhiVarIdToUserString(NHI_VAR_ID value);

/**
 *  @brief      Convert the given string to an NHI_VAR_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The variable id of string.
 *
 *  @retval     NYCE_OK                   string is successfully converted to a valid NHI_VAR_ID.
 *  @retval     NHI_ERR_INVALID_PARAMETER string or pValue is NULL.
 *  @retval     NHI_ERR_INVALID_STRING    string could not be converted to NHI_VAR_ID.
 */
NHI_EXPORT NYCE_STATUS NhiVarIdFromString(const char* string, NHI_VAR_ID* pValue);

/**
 *  @brief      Retrieve the description of NHI_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The description of the variable.
 */
NHI_EXPORT const char* NhiVarIdGetDescription(NHI_VAR_ID value);

/**
 *  @brief      Retrieve the unit type of a NHI_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The unit of the variable.
 */
NHI_EXPORT const char* NhiVarIdGetUnit(NHI_VAR_ID value);

/**
 *  @brief      Check if value is a valid NHI_VAR_ID.
 *
 *  @param[in]  value   The variable to check.
 *
 *  @retval     TRUE    value is a valid nhi variable.
 *  @retval     FALSE   value is an invalid nhi variable.
 */
NHI_EXPORT BOOL NhiVarIdIsValid(NHI_VAR_ID value);

/**
 *  @brief      Retrieve the category of NHI_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The category of the variable.
 */
NHI_EXPORT NHI_VAR_CATEGORY NhiVarIdGetCategory(NHI_VAR_ID value);

/**
 *  @brief      Retrieve the data type of NHI_VAR_ID.
 *
 *  @param[in]  value   The variable id.
 *
 *  @return     The data type of the variable.
 */
NHI_EXPORT NYCE_DATA_TYPE NhiVarIdGetDataType(NHI_VAR_ID value);

/**
 *  @}
 */

#ifdef __cplusplus
}
#endif

#endif
