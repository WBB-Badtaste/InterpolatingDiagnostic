/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name  : NYCe4000
 *  Component Name: HOSTSW
 *  Subsystem Name: NHI
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_par_var_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/*!
 *  @file
 *  @brief  Definition file for the parameter conversion functions for the subsystems NHI.
 *
 *  For the NHI_PAR_ID type, the following support functions exist:
 *  - NHI_PAR_ID_NR_OF_IDS                    Number of NHI parameters.
 *  - NhiParIdNrOfIds()                       Retrieve the number of NHI parameters.
 *  - NhiParIdByIndex(index, *NHI_PAR_ID)     Retrieve the n-th NHI parameter.
 *  - NhiParIdToString(NHI_PAR_ID)            Retrieve the name of NHI parameter.
 *  - NhiParIdToUserString(NHI_PAR_ID)        Retrieve a human readable string for NHI parameter.
 *  - NhiParIdFromString(string, *NHI_PAR_ID) Retrieve the NHI parameter representing the string.
 *  - NhiParIdGetDescription(NHI_PAR_ID)      Retrieve the description of NHI parameter.
 *  - NhiParIdGetUnit(NHI_PAR_ID)             Retrieve the unit of NHI parameter.
 *  - NhiParIdIsValid(NHI_PAR_ID)             Checks if the given value of NHI parameter is valid.
 *  - NhiParIdGetCategory(NHI_PAR_ID)         Retrieve the category of NHI parameter.
 *  - NhiParIdGetDataType(NHI_PAR_ID)         Retrieve the data type of NHI parameter.
 */

#ifndef __NHI_PAR_CONVERSION_H__
#define __NHI_PAR_CONVERSION_H__

#include "nhiparameters.h"

#ifndef NHI_EXPORT
    #ifdef WIN32
        #define NHI_EXPORT __declspec(dllimport)
    #else
        #define NHI_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 *  @addtogroup nhi_conversion
 *  @{
 */

/**
 *  Every parameter belongs to a category.
 *  These categories are used in the NYCe tools to show sets of parameters.
 */
typedef enum nhi_par_category
{
    NHI_PAR_CATEGORY_UNSPECIFIED,
    NHI_PAR_CATEGORY_NODE_PARAMETERS,
    NHI_PAR_CATEGORY_SDC_PARAMETERS,
    NHI_PAR_CATEGORY_DRIVE_PARAMETERS
} NHI_PAR_CATEGORY;

// NHI parameter conversion functions

/**
 *  @brief      Number of NHI_PAR_IDs.
 */
#define NHI_PAR_NR_OF_IDS 382

/**
 *  @brief      Retrieve the number of NHI_PAR_IDs.
 *
 *  @return     Number of NHI_PAR_IDs.
 */
NHI_EXPORT uint32_t NhiParIdNrOfIds(void);

/**
 *  @brief      Retrieve the n-th NHI_PAR_ID.
 *
 *  @param[in]  index   The index within NHI_PAR_NR_OF_IDS to retrieve.
 *  @param[out] pValue  The value of the n-th nhi parameter.
 *
 *  @retval     NYCE_OK                         parameter successfully retrieved.
 *  @retval     NHI_ERR_INVALID_PARAMETER       pValue is NULL.
 *  @retval     NHI_ERR_PARAMETER_OUT_OF_RANGE  index is out of range.
 */
NHI_EXPORT NYCE_STATUS NhiParIdByIndex(uint32_t index, NHI_PAR_ID* pValue);

/**
 *  @brief      Convert type NHI_PAR_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
NHI_EXPORT const char* NhiParIdToString(NHI_PAR_ID value);

/**
 *  @brief      Convert type NHI_PAR_ID to a human readable string.
 *
 *  @param[in]  value   The parameter to convert.
 *
 *  @return     The human readable string representation of value.
 */
NHI_EXPORT const char* NhiParIdToUserString(NHI_PAR_ID value);

/**
 *  @brief      Convert the given string to an NHI_PAR_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The parameter id of string.
 *
 *  @retval     NYCE_OK                   string is successfully converted to a valid NHI_PAR_ID.
 *  @retval     NHI_ERR_INVALID_PARAMETER string or pValue is NULL.
 *  @retval     NHI_ERR_INVALID_STRING    string could not be converted to NHI_PAR_ID.
 */
NHI_EXPORT NYCE_STATUS NhiParIdFromString(const char* string, NHI_PAR_ID* pValue);

/**
 *  @brief      Retrieve the description of NHI_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The description of the parameter.
 */
NHI_EXPORT const char* NhiParIdGetDescription(NHI_PAR_ID value);

/**
 *  @brief      Retrieve the unit type of a NHI_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The unit of the parameter.
 */
NHI_EXPORT const char* NhiParIdGetUnit(NHI_PAR_ID value);

/**
 *  @brief      Check if value is a valid NHI_PAR_ID.
 *
 *  @param[in]  value   The parameter to check.
 *
 *  @retval     TRUE    value is a valid nhi parameter.
 *  @retval     FALSE   value is an invalid nhi parameter.
 */
NHI_EXPORT BOOL NhiParIdIsValid(NHI_PAR_ID value);

/**
 *  @brief      Retrieve the category of NHI_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The category of the parameter.
 */
NHI_EXPORT NHI_PAR_CATEGORY NhiParIdGetCategory(NHI_PAR_ID value);

/**
 *  @brief      Retrieve the data type of NHI_PAR_ID.
 *
 *  @param[in]  value   The parameter id.
 *
 *  @return     The data type of the parameter.
 */
NHI_EXPORT NYCE_DATA_TYPE NhiParIdGetDataType(NHI_PAR_ID value);

/**
 *  @}
 */

#ifdef __cplusplus
}
#endif

#endif
