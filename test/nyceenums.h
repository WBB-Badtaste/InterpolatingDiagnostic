/*
 *  BOSCH REXROTH
 *
 *  Copyright (c) Bosch Rexroth AG 2014
 *  Internet: http://www.boschrexroth.com
 *
 *  Product Name:   NYCe4000
 *  Component Name: support
 *  Subsystem Name: deh
 *
 *  THIS FILE IS AUTOMATICALLY GENERATED BY
 *  generate_enum_conversion.py
 *  MANUAL MODIFICATIONS WILL BE OVERWRITTEN!!!
 */
/**
 *  @file
 *  @brief  Enum conversion functions for nyce.
 *  
 *  For every enum in the nyce subsystem the following type to string conversion functions exist:
 *  - "<TYPE>ToString(TYPE)"            Convert the given value of "<TYPE>" to its exact string representation.
 *  - "<TYPE>ToUserString(TYPE)"        Convert the given value of "<TYPE>" to a human readable string.
 *  - "<TYPE>ToDescription(TYPE)"       Convert the given value of "<TYPE>" to a descriptive string.
 *  - "<TYPE>FromString(string, TYPE)"  Convert the given string to value of "<TYPE>".
 *  - "<TYPE>IsValid(TYPE)"             Checks if the given value of "<TYPE>" is valid.
 */

#ifndef __NYCEENUMS_H__
#define __NYCEENUMS_H__

#include "nyceapi.h"

#ifndef DEH_EXPORT
    #ifdef WIN32
        #define DEH_EXPORT __declspec(dllimport)
    #else
        #define DEH_EXPORT
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif
/**
 *  @addtogroup nyce_conversion
 *  @{
 */

//  NYCE_SUBSYSTEM Conversion routines

/**
 *  @brief      Convert type NYCE_SUBSYSTEM to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSubsystemToString(NYCE_SUBSYSTEM value);

/**
 *  @brief      Convert type NYCE_SUBSYSTEM to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSubsystemToUserString(NYCE_SUBSYSTEM value);

/**
 *  @brief      Convert type NYCE_SUBSYSTEM to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceSubsystemToDescription(NYCE_SUBSYSTEM value);

/**
 *  @brief      Convert the given string to an NYCE_SUBSYSTEM.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_SUBSYSTEM.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_SUBSYSTEM.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceSubsystemFromString(const char* string, NYCE_SUBSYSTEM* pValue);

/**
 *  @brief      Check if value is a valid NYCE_SUBSYSTEM.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_SUBSYSTEM.
 *  @retval     FALSE   value is not a valid NYCE_SUBSYSTEM.
 */
DEH_EXPORT BOOL NyceSubsystemIsValid(NYCE_SUBSYSTEM value);


//  NYCE_SLOT_ID Conversion routines

/**
 *  @brief      Convert type NYCE_SLOT_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSlotIdToString(NYCE_SLOT_ID value);

/**
 *  @brief      Convert type NYCE_SLOT_ID to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSlotIdToUserString(NYCE_SLOT_ID value);

/**
 *  @brief      Convert type NYCE_SLOT_ID to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceSlotIdToDescription(NYCE_SLOT_ID value);

/**
 *  @brief      Convert the given string to an NYCE_SLOT_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_SLOT_ID.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_SLOT_ID.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceSlotIdFromString(const char* string, NYCE_SLOT_ID* pValue);

/**
 *  @brief      Check if value is a valid NYCE_SLOT_ID.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_SLOT_ID.
 *  @retval     FALSE   value is not a valid NYCE_SLOT_ID.
 */
DEH_EXPORT BOOL NyceSlotIdIsValid(NYCE_SLOT_ID value);


//  NYCE_FW_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_FW_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceFwTypeToString(NYCE_FW_TYPE value);

/**
 *  @brief      Convert type NYCE_FW_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceFwTypeToUserString(NYCE_FW_TYPE value);

/**
 *  @brief      Convert type NYCE_FW_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceFwTypeToDescription(NYCE_FW_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_FW_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_FW_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_FW_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceFwTypeFromString(const char* string, NYCE_FW_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_FW_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_FW_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_FW_TYPE.
 */
DEH_EXPORT BOOL NyceFwTypeIsValid(NYCE_FW_TYPE value);


//  NYCE_DIMENSION_CONVERSION Conversion routines

/**
 *  @brief      Convert type NYCE_DIMENSION_CONVERSION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDimensionConversionToString(NYCE_DIMENSION_CONVERSION value);

/**
 *  @brief      Convert type NYCE_DIMENSION_CONVERSION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDimensionConversionToUserString(NYCE_DIMENSION_CONVERSION value);

/**
 *  @brief      Convert type NYCE_DIMENSION_CONVERSION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceDimensionConversionToDescription(NYCE_DIMENSION_CONVERSION value);

/**
 *  @brief      Convert the given string to an NYCE_DIMENSION_CONVERSION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_DIMENSION_CONVERSION.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_DIMENSION_CONVERSION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceDimensionConversionFromString(const char* string, NYCE_DIMENSION_CONVERSION* pValue);

/**
 *  @brief      Check if value is a valid NYCE_DIMENSION_CONVERSION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_DIMENSION_CONVERSION.
 *  @retval     FALSE   value is not a valid NYCE_DIMENSION_CONVERSION.
 */
DEH_EXPORT BOOL NyceDimensionConversionIsValid(NYCE_DIMENSION_CONVERSION value);


//  NYCE_FW_MODULE_ID Conversion routines

/**
 *  @brief      Convert type NYCE_FW_MODULE_ID to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceFwModuleIdToString(NYCE_FW_MODULE_ID value);

/**
 *  @brief      Convert type NYCE_FW_MODULE_ID to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceFwModuleIdToUserString(NYCE_FW_MODULE_ID value);

/**
 *  @brief      Convert type NYCE_FW_MODULE_ID to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceFwModuleIdToDescription(NYCE_FW_MODULE_ID value);

/**
 *  @brief      Convert the given string to an NYCE_FW_MODULE_ID.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_FW_MODULE_ID.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_FW_MODULE_ID.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceFwModuleIdFromString(const char* string, NYCE_FW_MODULE_ID* pValue);

/**
 *  @brief      Check if value is a valid NYCE_FW_MODULE_ID.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_FW_MODULE_ID.
 *  @retval     FALSE   value is not a valid NYCE_FW_MODULE_ID.
 */
DEH_EXPORT BOOL NyceFwModuleIdIsValid(NYCE_FW_MODULE_ID value);


//  NYCE_DATA_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_DATA_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDataTypeToString(NYCE_DATA_TYPE value);

/**
 *  @brief      Convert type NYCE_DATA_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDataTypeToUserString(NYCE_DATA_TYPE value);

/**
 *  @brief      Convert type NYCE_DATA_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceDataTypeToDescription(NYCE_DATA_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_DATA_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_DATA_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_DATA_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceDataTypeFromString(const char* string, NYCE_DATA_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_DATA_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_DATA_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_DATA_TYPE.
 */
DEH_EXPORT BOOL NyceDataTypeIsValid(NYCE_DATA_TYPE value);


//  NYCE_SEQ_AREA_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_SEQ_AREA_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSeqAreaTypeToString(NYCE_SEQ_AREA_TYPE value);

/**
 *  @brief      Convert type NYCE_SEQ_AREA_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSeqAreaTypeToUserString(NYCE_SEQ_AREA_TYPE value);

/**
 *  @brief      Convert type NYCE_SEQ_AREA_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceSeqAreaTypeToDescription(NYCE_SEQ_AREA_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_SEQ_AREA_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_SEQ_AREA_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_SEQ_AREA_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceSeqAreaTypeFromString(const char* string, NYCE_SEQ_AREA_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_SEQ_AREA_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_SEQ_AREA_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_SEQ_AREA_TYPE.
 */
DEH_EXPORT BOOL NyceSeqAreaTypeIsValid(NYCE_SEQ_AREA_TYPE value);


//  NYCE_FIRMWARE_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_FIRMWARE_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceFirmwareTypeToString(NYCE_FIRMWARE_TYPE value);

/**
 *  @brief      Convert type NYCE_FIRMWARE_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceFirmwareTypeToUserString(NYCE_FIRMWARE_TYPE value);

/**
 *  @brief      Convert type NYCE_FIRMWARE_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceFirmwareTypeToDescription(NYCE_FIRMWARE_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_FIRMWARE_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_FIRMWARE_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_FIRMWARE_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceFirmwareTypeFromString(const char* string, NYCE_FIRMWARE_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_FIRMWARE_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_FIRMWARE_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_FIRMWARE_TYPE.
 */
DEH_EXPORT BOOL NyceFirmwareTypeIsValid(NYCE_FIRMWARE_TYPE value);


//  NYCE_MCU_UNIT_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_MCU_UNIT_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceMcuUnitTypeToString(NYCE_MCU_UNIT_TYPE value);

/**
 *  @brief      Convert type NYCE_MCU_UNIT_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceMcuUnitTypeToUserString(NYCE_MCU_UNIT_TYPE value);

/**
 *  @brief      Convert type NYCE_MCU_UNIT_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceMcuUnitTypeToDescription(NYCE_MCU_UNIT_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_MCU_UNIT_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_MCU_UNIT_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_MCU_UNIT_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceMcuUnitTypeFromString(const char* string, NYCE_MCU_UNIT_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_MCU_UNIT_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_MCU_UNIT_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_MCU_UNIT_TYPE.
 */
DEH_EXPORT BOOL NyceMcuUnitTypeIsValid(NYCE_MCU_UNIT_TYPE value);


//  NYCE_UNIT_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_UNIT_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceUnitTypeToString(NYCE_UNIT_TYPE value);

/**
 *  @brief      Convert type NYCE_UNIT_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceUnitTypeToUserString(NYCE_UNIT_TYPE value);

/**
 *  @brief      Convert type NYCE_UNIT_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceUnitTypeToDescription(NYCE_UNIT_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_UNIT_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_UNIT_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_UNIT_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceUnitTypeFromString(const char* string, NYCE_UNIT_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_UNIT_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_UNIT_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_UNIT_TYPE.
 */
DEH_EXPORT BOOL NyceUnitTypeIsValid(NYCE_UNIT_TYPE value);


//  NYCE_EXPANSION_MODULE_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_EXPANSION_MODULE_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceExpansionModuleTypeToString(NYCE_EXPANSION_MODULE_TYPE value);

/**
 *  @brief      Convert type NYCE_EXPANSION_MODULE_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceExpansionModuleTypeToUserString(NYCE_EXPANSION_MODULE_TYPE value);

/**
 *  @brief      Convert type NYCE_EXPANSION_MODULE_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceExpansionModuleTypeToDescription(NYCE_EXPANSION_MODULE_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_EXPANSION_MODULE_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_EXPANSION_MODULE_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_EXPANSION_MODULE_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceExpansionModuleTypeFromString(const char* string, NYCE_EXPANSION_MODULE_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_EXPANSION_MODULE_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_EXPANSION_MODULE_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_EXPANSION_MODULE_TYPE.
 */
DEH_EXPORT BOOL NyceExpansionModuleTypeIsValid(NYCE_EXPANSION_MODULE_TYPE value);


//  NYCE_NODE_STATUS Conversion routines

/**
 *  @brief      Convert type NYCE_NODE_STATUS to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceNodeStatusToString(NYCE_NODE_STATUS value);

/**
 *  @brief      Convert type NYCE_NODE_STATUS to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceNodeStatusToUserString(NYCE_NODE_STATUS value);

/**
 *  @brief      Convert type NYCE_NODE_STATUS to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceNodeStatusToDescription(NYCE_NODE_STATUS value);

/**
 *  @brief      Convert the given string to an NYCE_NODE_STATUS.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_NODE_STATUS.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_NODE_STATUS.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceNodeStatusFromString(const char* string, NYCE_NODE_STATUS* pValue);

/**
 *  @brief      Check if value is a valid NYCE_NODE_STATUS.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_NODE_STATUS.
 *  @retval     FALSE   value is not a valid NYCE_NODE_STATUS.
 */
DEH_EXPORT BOOL NyceNodeStatusIsValid(NYCE_NODE_STATUS value);


//  NYCE_ID_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_ID_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceIdTypeToString(NYCE_ID_TYPE value);

/**
 *  @brief      Convert type NYCE_ID_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceIdTypeToUserString(NYCE_ID_TYPE value);

/**
 *  @brief      Convert type NYCE_ID_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceIdTypeToDescription(NYCE_ID_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_ID_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_ID_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_ID_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceIdTypeFromString(const char* string, NYCE_ID_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_ID_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_ID_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_ID_TYPE.
 */
DEH_EXPORT BOOL NyceIdTypeIsValid(NYCE_ID_TYPE value);


//  NYCE_LEVEL_TRANSITION Conversion routines

/**
 *  @brief      Convert type NYCE_LEVEL_TRANSITION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceLevelTransitionToString(NYCE_LEVEL_TRANSITION value);

/**
 *  @brief      Convert type NYCE_LEVEL_TRANSITION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceLevelTransitionToUserString(NYCE_LEVEL_TRANSITION value);

/**
 *  @brief      Convert type NYCE_LEVEL_TRANSITION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceLevelTransitionToDescription(NYCE_LEVEL_TRANSITION value);

/**
 *  @brief      Convert the given string to an NYCE_LEVEL_TRANSITION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_LEVEL_TRANSITION.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_LEVEL_TRANSITION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceLevelTransitionFromString(const char* string, NYCE_LEVEL_TRANSITION* pValue);

/**
 *  @brief      Check if value is a valid NYCE_LEVEL_TRANSITION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_LEVEL_TRANSITION.
 *  @retval     FALSE   value is not a valid NYCE_LEVEL_TRANSITION.
 */
DEH_EXPORT BOOL NyceLevelTransitionIsValid(NYCE_LEVEL_TRANSITION value);


//  NYCE_DIGITAL_IO_LEVEL Conversion routines

/**
 *  @brief      Convert type NYCE_DIGITAL_IO_LEVEL to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigitalIoLevelToString(NYCE_DIGITAL_IO_LEVEL value);

/**
 *  @brief      Convert type NYCE_DIGITAL_IO_LEVEL to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigitalIoLevelToUserString(NYCE_DIGITAL_IO_LEVEL value);

/**
 *  @brief      Convert type NYCE_DIGITAL_IO_LEVEL to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigitalIoLevelToDescription(NYCE_DIGITAL_IO_LEVEL value);

/**
 *  @brief      Convert the given string to an NYCE_DIGITAL_IO_LEVEL.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_DIGITAL_IO_LEVEL.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_DIGITAL_IO_LEVEL.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceDigitalIoLevelFromString(const char* string, NYCE_DIGITAL_IO_LEVEL* pValue);

/**
 *  @brief      Check if value is a valid NYCE_DIGITAL_IO_LEVEL.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_DIGITAL_IO_LEVEL.
 *  @retval     FALSE   value is not a valid NYCE_DIGITAL_IO_LEVEL.
 */
DEH_EXPORT BOOL NyceDigitalIoLevelIsValid(NYCE_DIGITAL_IO_LEVEL value);


//  NYCE_NETWORK_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_NETWORK_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceNetworkTypeToString(NYCE_NETWORK_TYPE value);

/**
 *  @brief      Convert type NYCE_NETWORK_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceNetworkTypeToUserString(NYCE_NETWORK_TYPE value);

/**
 *  @brief      Convert type NYCE_NETWORK_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceNetworkTypeToDescription(NYCE_NETWORK_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_NETWORK_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_NETWORK_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_NETWORK_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceNetworkTypeFromString(const char* string, NYCE_NETWORK_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_NETWORK_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_NETWORK_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_NETWORK_TYPE.
 */
DEH_EXPORT BOOL NyceNetworkTypeIsValid(NYCE_NETWORK_TYPE value);


//  NYCE_DIG_IO_NR Conversion routines

/**
 *  @brief      Convert type NYCE_DIG_IO_NR to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigIoNrToString(NYCE_DIG_IO_NR value);

/**
 *  @brief      Convert type NYCE_DIG_IO_NR to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigIoNrToUserString(NYCE_DIG_IO_NR value);

/**
 *  @brief      Convert type NYCE_DIG_IO_NR to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigIoNrToDescription(NYCE_DIG_IO_NR value);

/**
 *  @brief      Convert the given string to an NYCE_DIG_IO_NR.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_DIG_IO_NR.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_DIG_IO_NR.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceDigIoNrFromString(const char* string, NYCE_DIG_IO_NR* pValue);

/**
 *  @brief      Check if value is a valid NYCE_DIG_IO_NR.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_DIG_IO_NR.
 *  @retval     FALSE   value is not a valid NYCE_DIG_IO_NR.
 */
DEH_EXPORT BOOL NyceDigIoNrIsValid(NYCE_DIG_IO_NR value);


//  NYCE_ACTIVE_STATE Conversion routines

/**
 *  @brief      Convert type NYCE_ACTIVE_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceActiveStateToString(NYCE_ACTIVE_STATE value);

/**
 *  @brief      Convert type NYCE_ACTIVE_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceActiveStateToUserString(NYCE_ACTIVE_STATE value);

/**
 *  @brief      Convert type NYCE_ACTIVE_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceActiveStateToDescription(NYCE_ACTIVE_STATE value);

/**
 *  @brief      Convert the given string to an NYCE_ACTIVE_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_ACTIVE_STATE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_ACTIVE_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceActiveStateFromString(const char* string, NYCE_ACTIVE_STATE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_ACTIVE_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_ACTIVE_STATE.
 *  @retval     FALSE   value is not a valid NYCE_ACTIVE_STATE.
 */
DEH_EXPORT BOOL NyceActiveStateIsValid(NYCE_ACTIVE_STATE value);


//  NYCE_EDGE_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_EDGE_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceEdgeTypeToString(NYCE_EDGE_TYPE value);

/**
 *  @brief      Convert type NYCE_EDGE_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceEdgeTypeToUserString(NYCE_EDGE_TYPE value);

/**
 *  @brief      Convert type NYCE_EDGE_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceEdgeTypeToDescription(NYCE_EDGE_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_EDGE_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_EDGE_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_EDGE_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceEdgeTypeFromString(const char* string, NYCE_EDGE_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_EDGE_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_EDGE_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_EDGE_TYPE.
 */
DEH_EXPORT BOOL NyceEdgeTypeIsValid(NYCE_EDGE_TYPE value);


//  NYCE_DIGOUT_ACTION Conversion routines

/**
 *  @brief      Convert type NYCE_DIGOUT_ACTION to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigoutActionToString(NYCE_DIGOUT_ACTION value);

/**
 *  @brief      Convert type NYCE_DIGOUT_ACTION to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigoutActionToUserString(NYCE_DIGOUT_ACTION value);

/**
 *  @brief      Convert type NYCE_DIGOUT_ACTION to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceDigoutActionToDescription(NYCE_DIGOUT_ACTION value);

/**
 *  @brief      Convert the given string to an NYCE_DIGOUT_ACTION.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_DIGOUT_ACTION.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_DIGOUT_ACTION.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceDigoutActionFromString(const char* string, NYCE_DIGOUT_ACTION* pValue);

/**
 *  @brief      Check if value is a valid NYCE_DIGOUT_ACTION.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_DIGOUT_ACTION.
 *  @retval     FALSE   value is not a valid NYCE_DIGOUT_ACTION.
 */
DEH_EXPORT BOOL NyceDigoutActionIsValid(NYCE_DIGOUT_ACTION value);


//  NYCE_SERCOS_DEVICE_TYPE Conversion routines

/**
 *  @brief      Convert type NYCE_SERCOS_DEVICE_TYPE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosDeviceTypeToString(NYCE_SERCOS_DEVICE_TYPE value);

/**
 *  @brief      Convert type NYCE_SERCOS_DEVICE_TYPE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosDeviceTypeToUserString(NYCE_SERCOS_DEVICE_TYPE value);

/**
 *  @brief      Convert type NYCE_SERCOS_DEVICE_TYPE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosDeviceTypeToDescription(NYCE_SERCOS_DEVICE_TYPE value);

/**
 *  @brief      Convert the given string to an NYCE_SERCOS_DEVICE_TYPE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_SERCOS_DEVICE_TYPE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_SERCOS_DEVICE_TYPE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceSercosDeviceTypeFromString(const char* string, NYCE_SERCOS_DEVICE_TYPE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_SERCOS_DEVICE_TYPE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_SERCOS_DEVICE_TYPE.
 *  @retval     FALSE   value is not a valid NYCE_SERCOS_DEVICE_TYPE.
 */
DEH_EXPORT BOOL NyceSercosDeviceTypeIsValid(NYCE_SERCOS_DEVICE_TYPE value);


//  NYCE_SERCOS_NETWORK_STATUS Conversion routines

/**
 *  @brief      Convert type NYCE_SERCOS_NETWORK_STATUS to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosNetworkStatusToString(NYCE_SERCOS_NETWORK_STATUS value);

/**
 *  @brief      Convert type NYCE_SERCOS_NETWORK_STATUS to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosNetworkStatusToUserString(NYCE_SERCOS_NETWORK_STATUS value);

/**
 *  @brief      Convert type NYCE_SERCOS_NETWORK_STATUS to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosNetworkStatusToDescription(NYCE_SERCOS_NETWORK_STATUS value);

/**
 *  @brief      Convert the given string to an NYCE_SERCOS_NETWORK_STATUS.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_SERCOS_NETWORK_STATUS.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_SERCOS_NETWORK_STATUS.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceSercosNetworkStatusFromString(const char* string, NYCE_SERCOS_NETWORK_STATUS* pValue);

/**
 *  @brief      Check if value is a valid NYCE_SERCOS_NETWORK_STATUS.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_SERCOS_NETWORK_STATUS.
 *  @retval     FALSE   value is not a valid NYCE_SERCOS_NETWORK_STATUS.
 */
DEH_EXPORT BOOL NyceSercosNetworkStatusIsValid(NYCE_SERCOS_NETWORK_STATUS value);


//  NYCE_SERCOS_DEVICE_STATUS Conversion routines

/**
 *  @brief      Convert type NYCE_SERCOS_DEVICE_STATUS to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosDeviceStatusToString(NYCE_SERCOS_DEVICE_STATUS value);

/**
 *  @brief      Convert type NYCE_SERCOS_DEVICE_STATUS to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosDeviceStatusToUserString(NYCE_SERCOS_DEVICE_STATUS value);

/**
 *  @brief      Convert type NYCE_SERCOS_DEVICE_STATUS to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceSercosDeviceStatusToDescription(NYCE_SERCOS_DEVICE_STATUS value);

/**
 *  @brief      Convert the given string to an NYCE_SERCOS_DEVICE_STATUS.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_SERCOS_DEVICE_STATUS.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_SERCOS_DEVICE_STATUS.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceSercosDeviceStatusFromString(const char* string, NYCE_SERCOS_DEVICE_STATUS* pValue);

/**
 *  @brief      Check if value is a valid NYCE_SERCOS_DEVICE_STATUS.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_SERCOS_DEVICE_STATUS.
 *  @retval     FALSE   value is not a valid NYCE_SERCOS_DEVICE_STATUS.
 */
DEH_EXPORT BOOL NyceSercosDeviceStatusIsValid(NYCE_SERCOS_DEVICE_STATUS value);


//  NYCE_TRACE_STATE Conversion routines

/**
 *  @brief      Convert type NYCE_TRACE_STATE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceTraceStateToString(NYCE_TRACE_STATE value);

/**
 *  @brief      Convert type NYCE_TRACE_STATE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceTraceStateToUserString(NYCE_TRACE_STATE value);

/**
 *  @brief      Convert type NYCE_TRACE_STATE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceTraceStateToDescription(NYCE_TRACE_STATE value);

/**
 *  @brief      Convert the given string to an NYCE_TRACE_STATE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_TRACE_STATE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_TRACE_STATE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceTraceStateFromString(const char* string, NYCE_TRACE_STATE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_TRACE_STATE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_TRACE_STATE.
 *  @retval     FALSE   value is not a valid NYCE_TRACE_STATE.
 */
DEH_EXPORT BOOL NyceTraceStateIsValid(NYCE_TRACE_STATE value);


//  NYCE_TRACE_ERROR_CODE Conversion routines

/**
 *  @brief      Convert type NYCE_TRACE_ERROR_CODE to the exact string representation.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceTraceErrorCodeToString(NYCE_TRACE_ERROR_CODE value);

/**
 *  @brief      Convert type NYCE_TRACE_ERROR_CODE to a human readable string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The human readable string representation of value.
 */
DEH_EXPORT const char* NYCE_API NyceTraceErrorCodeToUserString(NYCE_TRACE_ERROR_CODE value);

/**
 *  @brief      Convert type NYCE_TRACE_ERROR_CODE to a descriptive string.
 *
 *  @param[in]  value   The value to convert.
 *
 *  @return     The description of value.
 */
DEH_EXPORT const char* NYCE_API NyceTraceErrorCodeToDescription(NYCE_TRACE_ERROR_CODE value);

/**
 *  @brief      Convert the given string to an NYCE_TRACE_ERROR_CODE.
 *
 *  @param[in]  string  The string to convert.
 *  @param[out] pValue  The enum value of string.
 *
 *  @retval     NYCE_OK                      string is successfully converted to a valid NYCE_TRACE_ERROR_CODE.
 *  @retval     NYCE_ERR_INVALID_PARAMETER   string or pValue is NULL.
 *  @retval     NYCE_ERR_UNKNOWN_ENUM_STRING string could not be converted to NYCE_TRACE_ERROR_CODE.
 */
DEH_EXPORT NYCE_STATUS NYCE_API NyceTraceErrorCodeFromString(const char* string, NYCE_TRACE_ERROR_CODE* pValue);

/**
 *  @brief      Check if value is a valid NYCE_TRACE_ERROR_CODE.
 *
 *  @param[in]  value   The value to check.
 *
 *  @retval     TRUE    value is a valid NYCE_TRACE_ERROR_CODE.
 *  @retval     FALSE   value is not a valid NYCE_TRACE_ERROR_CODE.
 */
DEH_EXPORT BOOL NyceTraceErrorCodeIsValid(NYCE_TRACE_ERROR_CODE value);


/**
 *  @}
 */
#ifdef __cplusplus
}
#endif

#endif
